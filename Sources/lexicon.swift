let aliases: [String:String] = [
    "pick up":"take",
]

let lexicon: [String:Set<PhrasalCategory>] = [
    "look":[v("look")],
    //"examine":[v],
    //"glance":[v],
    "read":[v("read")],
    //"save":[v],
    //"restore":[v],
    "quit":[v("quit")],
    //"restart":[v],
    "take":[v("take")],
    "get":[v("take")],
    "drop":[v("drop")],
    "transfer":[v("transfer")],
    "go":[v("go")],
    "move":[v("go"), v("transfer")],
    "open":[v("open"), adj("open")],
    "close":[v("close")],
    "insert":[v("insert")],
    "put":[v("insert")],
    //"push":[v],
    //"pull":[v],
    //"turn":[v],
    //"feel":[v],
    //"eat":[v],
    //"drink":[v],
    //"smell":[v],
    //"listen":[v],
    //"climb":[v],
    //"break":[v],
    //"burn":[v],
    //"lock":[v("lock"), n("lock")],
    "unlock":[v("unlock")],
    //"wave":[v],
    //"wear":[v],
    //"dig":[v],
    "enter":[v("enter")],
    "exit":[v("exit"), v("quit")],
    //"search":[v],
    //"jump":[v],
    //"say":[v],
    //"yell":[v],
    //"whisper":[v],
    //"tell":[v],
    //"show":[v],
    //"help":[v, n],
    //"give":[v],
    //"kill":[v],
    //"attack":[v],
    //"kiss":[v],
    //"knock":[v],
    //"lick":[v],
    //"remove":[v],
    //"sit":[v],
    //"sleep":[v],
    //"wait":[v],
    //"taste":[v],
    "throw":[v("throw")],
    //"toss":[v],
    //"tie":[v, n],
    //"untie":[v],
    //"touch":[v],
    //"prod":[v],
    //"poke":[v],
    //"nudge":[v],
    //"blow":[v],
    //"buy":[v],
    //"cut":[v],
    //"rub":[v],
    //"wake":[v],
    //"swim":[v],
    //"squeeze":[v],
    //"crush":[v],
    //"mash":[v],
    //"set":[v],
    //"is":[v],
    
    "red":[Adjective("red", applyingFilter: { $0.attributes.contains("red") })],
    "green":[Adjective("green", applyingFilter: { $0.attributes.contains("green") })],
    "blue":[Adjective("blue", applyingFilter: { $0.attributes.contains("blue") })],
    "yellow":[Adjective("yellow", applyingFilter: { $0.attributes.contains("yellow") })],
    "orange":[Adjective("orange", applyingFilter: { $0.attributes.contains("orange") })/*, n("orange")*/],
    "purple":[Adjective("purple", applyingFilter: { $0.attributes.contains("purple") })],
    "violet":[Adjective("purple", applyingFilter: { $0.attributes.contains("purple") })],
    "brown":[Adjective("brown", applyingFilter: { $0.attributes.contains("brown") })],
    "silver":[Adjective("silver", applyingFilter: { $0.attributes.contains("silver") })/*, n("silver")*/],
    "gold":[Adjective("gold", applyingFilter: { $0.attributes.contains("gold") })/*, n("gold")*/],
    "golden":[Adjective("gold", applyingFilter: { $0.attributes.contains("gold") })],
    "white":[Adjective("white", applyingFilter: { $0.attributes.contains("white") })],
    "black":[Adjective("black", applyingFilter: { $0.attributes.contains("black") })],
    "light":[Adjective("light", applyingFilter: { $0.attributes.contains("light") }), v("light")],
    "dark":[Adjective("dark", applyingFilter: { $0.attributes.contains("dark") })],
    "clear":[Adjective("transparent", applyingFilter: { $0.attributes.contains("transparent") }), v("clear")],
    "transparent":[Adjective("transparent", applyingFilter: { $0.attributes.contains("transparent") })],
    "transluscent":[Adjective("transparent", applyingFilter: { $0.attributes.contains("transparent") })],
    //"new":[adj],
    //"old":[adj],
    //"big":[adj],
    //"large":[adj],
    //"small":[adj],
    //"little":[adj],
    //"young":[adj],
    //"long":[adj],
    //"tall":[adj],
    //"broad":[adj],
    //"short":[adj],
    //"only":[adj],
    //"strong":[adj],
    //"sturdy":[adj],
    //"weak":[adj],
    //"dead":[adj],
    //"best":[adj],
    //"worst":[adj],
    //"strongest":[adj],
    //"weakest":[adj],
    //"oldest":[adj],
    //"newest":[adj],
    //"most":[adj],
    //"closed":[adj("closed")],
    
    //"not":[adv],???
    
    "up":[prep("up")],
    "down":[prep("down")],
    "north":[prep("north")],
    "south":[prep("south")],
    "east":[prep("east")],
    "west":[prep("west")],
    "northwest":[prep("northwest")],
    "northeast":[prep("northeast")],
    "southwest":[prep("southwest")],
    "southeast":[prep("southeast")],
    "in":[prep("in")],
    "above":[prep("above")],
    "below":[prep("below")],
    "at":[prep("at")],
    "to":[prep("to")],
    "from":[prep("from")],
    //"left":[prep],
    //"right":[prep],
    "on":[prep("on"), adv("on"), adj("on")],
    "of":[prep("of")],
    //"about":[prep],
    //"around":[prep],
    //"except":[prep],
    //"with":[prep],
    //"using":[prep],
    
    "the":[det("the", restr: { if $0.count <= 1 { return $0 } else { throw EvaluationError.DeterminerDidNotMatch(determiner: "the") } })],
    "a":[det("a", restr: { if $0.isEmpty { throw EvaluationError.DeterminerDidNotMatch(determiner: "a") } else { return [$0.first!] } })],
    "an":[det("an", restr: { if $0.isEmpty { throw EvaluationError.DeterminerDidNotMatch(determiner: "a") } else { return [$0.first!] } })],
    //"that":[det("that"), conj("that")],
    //"my":[det("my")],
    "all":[det("all", restr: { $0 })],
    
    "and":[conj("and")],
    "but":[conj("but")],
    "then":[conj("then")],
    
    "everything":[n("everything", sel: { $0 })],
    "inventory":[n("inventory", sel: { $0 })], // dummy function, "take inventory" is handled separately
    
    // SIMPLIFICATIONS
    // already parsed shortened versions of some common commands
    
    "n":[vp(v: v("go"), pp: pp(prep: prep("north")))],
    "s":[vp(v: v("go"), pp: pp(prep: prep("south")))],
    "e":[vp(v: v("go"), pp: pp(prep: prep("east")))],
    "w":[vp(v: v("go"), pp: pp(prep: prep("west")))],
    "u":[vp(v: v("go"), pp: pp(prep: prep("up")))],
    "d":[vp(v: v("go"), pp: pp(prep: prep("down")))],
    "i":[vp(v: v("take"), np: np(n: n("inventory", sel: { $0 })))],
    "l":[vp(v: v("look"))],
    "x":[vp(v: v("examine"))],
    "q":[vp(v: v("quit"))],
    
    // and some things (nouns) for testing ---------------------
    
    //"inventory":[n("inventory", applyingSelector: {})],
    //"self":[n("self")],
    //"pick":[n("pickaxe"), v("unlock")],
    "broom":[n("broom")] // change when we make a broom class
    //"room":[n("room")],
    //"door":[n("door")],
    //"chair":[n("chair")],
    //"me":[n("me")],
    //"egg":[n("egg")],
    //"pan":[n("pan")],
    //"spoon":[n("spoon")],
    //"fork":[n("fork")],
    //"knife":[n("knife")],
    //"sword":[n("sword")],
    //"longsword":[n("longsword")],
    //"bow":[n("bow")],
    //"longbow":[n("longbow")],
    //"mary":[n("mary")],
    //"foe":[n("foe")]
    
    // some more specfic things for testing edge cases --------
    
    
]

// NOTE: Nouns' Default selectors check for matching name or class identifier (inherited)
// NOTE: Adjectives' Default filters check if word is in the item's attributes